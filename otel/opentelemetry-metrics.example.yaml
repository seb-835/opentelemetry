apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: metrics 
  namespace: otel
  labels:
     name: metrics
spec:
  image: otel/opentelemetry-collector-contrib-dev:latest
  serviceAccount: otel-metrics
  mode: daemonset
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: OPEN_TELEMETRY_COLLECTOR_ORGID
      valueFrom:
        secretKeyRef:
          name: xscopeorgid
          key: X-SCOPE-ORGID 
    - name: OPEN_TELEMETRY_COLLECTOR_USERNAME
      valueFrom:
        secretKeyRef:
          name: loki-creds
          key: USER
    - name: OPEN_TELEMETRY_COLLECTOR_PASSWORD
      valueFrom:
        secretKeyRef:
          name: loki-creds
          key: PASSWORD

  tolerations:
    - operator: Exists
      effect: NoExecute
    - operator: Exists
      effect: NoSchedule

  config: |
    receivers:
      #list of metrics : https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/k8sclusterreceiver/metadata.yaml
      k8s_cluster:
        collection_interval: 10s
        node_conditions_to_report: 
          - Ready
          - MemoryPressure
          - DiskPressure
          - NetworkUnavailable
        allocatable_types_to_report: 
          - cpu
          - memory
          - storage
          - ephemeral-storage

      # list of metrics : https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/kubeletstatsreceiver/metadata.yaml
      kubeletstats:
        collection_interval: 10s
        auth_type: serviceAccount
        endpoint: "${env:K8S_NODE_NAME}:10250" 
        insecure_skip_verify: true
        extra_metadata_labels:
        - k8s.volume.type
        k8s_api_config:
          auth_type: serviceAccount
        metric_groups:
        - node
        - pod
        - volume
        - container
      
    processors:
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        filter:
          node_from_env_var: K8S_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
      
      resource:
        attributes:
         - action: delete
           key: container.id
         - key: host.name
           action: delete
         - action: insert
           key: cluster
           value: $OPEN_TELEMETRY_COLLECTOR_ORGID

    exporters:
      debug:

      prometheusremotewrite:
        endpoint: https://mimir.172.18.1.1.nip.io/api/v1/push
        resource_to_telemetry_conversion:
          enabled: true
        headers:
          X-Scope-OrgID: $OPEN_TELEMETRY_COLLECTOR_ORGID
        #auth:
        #  authenticator: basicauth/client
        tls:
          insecure: false
          insecure_skip_verify: true

    extensions:
      basicauth/client:
        client_auth: 
          username: $OPEN_TELEMETRY_COLLECTOR_USERNAME 
          password: $OPEN_TELEMETRY_COLLECTOR_PASSWORD

    service:
      extensions: [basicauth/client]
      pipelines:
        metrics:
          receivers: [k8s_cluster,kubeletstats]
          processors: [k8sattributes,resource]
          exporters: [prometheusremotewrite] 
